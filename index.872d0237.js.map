{"mappings":"ACEA,IAAM,EAAc,SAAS,aAAa,CAAC,SACrC,EAAa,SAAS,gBAAgB,CAAC,MACvC,EAAY,EAAE,CAGb,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,EADF,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EACE,KAAA,E,G,CADP,IAAA,IAAK,EAAA,EAAc,EAAY,QAAQ,CAAA,OAAA,QAAA,CAAA,GAAlC,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,C,G,CACH,IAAA,IAAK,EAAA,EAAc,EAAK,QAAQ,CAAA,OAAA,QAAA,CAAA,GAA3B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,GAAA,A,WAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAK,gBAAgB,CAAC,QAAS,YAC7B,AAcN,SAAc,CAAM,EAClB,IAAM,EAAU,EAAU,IAAI,CAAC,SAAC,CAAA,CAAG,CAAnC,EACE,OAAQ,GACN,IAAK,OACH,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI,CAEpC,KAAK,WACH,OAAO,EAAE,QAAQ,CAAC,aAAa,CAAC,EAAE,QAAQ,CAE5C,KAAK,MACH,OAAO,EAAE,GAAG,CAAG,EAAE,GAAG,AAEtB,KAAK,SACH,OACE,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,IAAI,CAAC,IAClC,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,IAAI,CAAC,GAExC,CACF,GAEI,EAAI,EAEH,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAgB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAhB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAyB,CAAzB,IAAM,EAAN,EAAA,KAAA,AACH,CAAA,CAAU,CAAC,IAAI,CAAC,WAAW,CAAG,EAAO,IAAI,CACzC,CAAU,CAAC,IAAI,CAAC,WAAW,CAAG,EAAO,QAAQ,CAC7C,CAAU,CAAC,IAAI,CAAC,WAAW,CAAG,EAAO,GAAG,CACxC,CAAU,CAAC,IAAI,CAAC,WAAW,CAAG,EAAO,MAAM,AAC7C,C,C,M,E,CALK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAMP,EA1CW,EAAK,WAAW,CACvB,E,G,C,M,E,CAHG,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,C,C,C,M,E,CADF,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAQL,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,MAAM,CAAE,GAAK,EAC1C,EAAU,IAAI,CAAC,CACb,KAAM,CAAU,CAAC,EAAE,CAAC,WAAW,CAC/B,SAAU,CAAU,CAAC,EAAI,EAAE,CAAC,WAAW,CACvC,IAAK,CAAU,CAAC,EAAI,EAAE,CAAC,WAAW,CAClC,OAAQ,CAAU,CAAC,EAAI,EAAE,CAAC,WAAW,AACvC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar tableHeader = document.querySelector(\"thead\");\nvar allRawData = document.querySelectorAll(\"td\");\nvar readyData = [];\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\ntry {\n    for(var _iterator = tableHeader.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){\n        var head = _step.value;\n        try {\n            var _loop = function() {\n                var info = _step1.value;\n                info.addEventListener(\"click\", function() {\n                    sort(info.textContent);\n                });\n            };\n            for(var _iterator1 = head.children[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true)_loop();\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator1.return != null) {\n                    _iterator1.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n} catch (err) {\n    _didIteratorError1 = true;\n    _iteratorError1 = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion1 && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError1) {\n            throw _iteratorError1;\n        }\n    }\n}\nfor(var i = 0; i < allRawData.length; i += 4)readyData.push({\n    name: allRawData[i].textContent,\n    position: allRawData[i + 1].textContent,\n    age: allRawData[i + 2].textContent,\n    salary: allRawData[i + 3].textContent\n});\nfunction sort(sortBy) {\n    var newData = readyData.sort(function(a, b) {\n        switch(sortBy){\n            case \"Name\":\n                return a.name.localeCompare(b.name);\n            case \"Position\":\n                return a.position.localeCompare(b.position);\n            case \"Age\":\n                return a.age - b.age;\n            case \"Salary\":\n                return a.salary.slice(1).split(\",\").join(\"\") - b.salary.slice(1).split(\",\").join(\"\");\n        }\n    });\n    var i = 0;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = newData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var person = _step.value;\n            allRawData[i++].textContent = person.name;\n            allRawData[i++].textContent = person.position;\n            allRawData[i++].textContent = person.age;\n            allRawData[i++].textContent = person.salary;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=index.872d0237.js.map\n","'use strict';\n\nconst tableHeader = document.querySelector('thead');\nconst allRawData = document.querySelectorAll('td');\nconst readyData = [];\n\nfor (const head of tableHeader.children) {\n  for (const info of head.children) {\n    info.addEventListener('click', () => {\n      sort(info.textContent);\n    });\n  }\n}\n\nfor (let i = 0; i < allRawData.length; i += 4) {\n  readyData.push({\n    name: allRawData[i].textContent,\n    position: allRawData[i + 1].textContent,\n    age: allRawData[i + 2].textContent,\n    salary: allRawData[i + 3].textContent,\n  });\n}\n\nfunction sort(sortBy) {\n  const newData = readyData.sort((a, b) => {\n    switch (sortBy) {\n      case 'Name':\n        return a.name.localeCompare(b.name);\n\n      case 'Position':\n        return a.position.localeCompare(b.position);\n\n      case 'Age':\n        return a.age - b.age;\n\n      case 'Salary':\n        return (\n          a.salary.slice(1).split(',').join('') -\n          b.salary.slice(1).split(',').join('')\n        );\n    }\n  });\n\n  let i = 0;\n\n  for (const person of newData) {\n    allRawData[i++].textContent = person.name;\n    allRawData[i++].textContent = person.position;\n    allRawData[i++].textContent = person.age;\n    allRawData[i++].textContent = person.salary;\n  }\n}\n"],"names":["tableHeader","document","querySelector","allRawData","querySelectorAll","readyData","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step","_iterator","children","Symbol","iterator","next","done","head","value","_step1","_iterator1","_loop","info","addEventListener","sort","sortBy","newData","a","b","name","localeCompare","position","age","salary","slice","split","join","i","person","textContent","err","return","length","push"],"version":3,"file":"index.872d0237.js.map"}